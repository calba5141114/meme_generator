{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","React","useState","url","setUrl","top","setTop","bottom","setBottom","textColor","setTextColor","textWeight","setTextWeight","Grommet","full","theme","grommet","Box","pad","align","justify","Heading","Text","alignContent","direction","width","height","background","image","weight","color","wrap","FormField","label","Select","options","value","onChange","option","TextInput","e","target","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sSA8CeA,MA1Cf,WAAgB,IAAD,EACSC,IAAMC,SAAS,0IADxB,mBACNC,EADM,KACDC,EADC,OAESH,IAAMC,SAAS,yDAFxB,mBAENG,EAFM,KAEDC,EAFC,OAGeL,IAAMC,SAAS,uBAH9B,mBAGNK,EAHM,KAGEC,EAHF,OAIqBP,IAAMC,SAAS,SAJpC,mBAINO,EAJM,KAIKC,EAJL,OAKuBT,IAAMC,SAAS,QALtC,mBAKNS,EALM,KAKMC,EALN,KAMb,OACE,kBAACC,EAAA,EAAD,CAASC,MAAI,EAACC,MAAOC,KACnB,kBAACC,EAAA,EAAD,CAAKC,IAAI,SAASC,MAAM,SAASC,QAAQ,UACvC,kBAACC,EAAA,EAAD,6BACA,kBAACC,EAAA,EAAD,kFACA,6BACA,kBAACL,EAAA,EAAD,CAAKC,IAAI,SAASK,aAAa,SAASH,QAAQ,UAAUI,UAAU,SAASC,MAAM,SAASC,OAAO,SAASC,WAAY,CAAEC,MAAM,OAAD,OAASzB,EAAT,OAC7H,kBAACmB,EAAA,EAAD,CAAMO,OAAQlB,EAAYmB,MAAOrB,GAAaJ,GAC9C,kBAACiB,EAAA,EAAD,CAAMO,OAAQlB,EAAYmB,MAAOrB,GAAaF,KAGlD,kBAACU,EAAA,EAAD,CAAKC,IAAI,SAASa,MAAI,EAACP,UAAU,MAAML,MAAM,SAASC,QAAQ,UAC5D,kBAACY,EAAA,EAAD,CAAWC,MAAM,cACf,kBAACC,EAAA,EAAD,CACEC,QAAS,CAAC,QAAS,QAAS,OAAQ,QACpCC,MAAO3B,EACP4B,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgB5B,EAAa4B,OAG3C,kBAACN,EAAA,EAAD,CAAWC,MAAM,aACf,kBAACM,EAAA,EAAD,CAAWH,MAAOjC,EAAKkC,SAAU,SAACG,GAAD,OAAOpC,EAAOoC,EAAEC,OAAOL,WAE1D,kBAACJ,EAAA,EAAD,CAAWC,MAAM,YACf,kBAACM,EAAA,EAAD,CAAWH,MAAO/B,EAAKgC,SAAU,SAACG,GAAD,OAAOlC,EAAOkC,EAAEC,OAAOL,WAE1D,kBAACJ,EAAA,EAAD,CAAWC,MAAM,YACf,kBAACM,EAAA,EAAD,CAAWH,MAAO7B,EAAQ8B,SAAU,SAACG,GAAD,OAAOhC,EAAUgC,EAAEC,OAAOL,WAEhE,kBAACJ,EAAA,EAAD,CAAWC,MAAM,sBACf,kBAACC,EAAA,EAAD,CAAQC,QAAS,CAAC,OAAQ,UAAWC,MAAOzB,EAAa0B,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgB1B,EAAc0B,UC3BvFI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.87020c00.chunk.js","sourcesContent":["import React from 'react'\nimport { Grommet, grommet, Box, Heading, Text, FormField, TextInput, Select } from 'grommet';\n\n\nfunction App() {\n  const [url, setUrl] = React.useState(\"https://images.unsplash.com/photo-1495837174058-628aafc7d610?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1350&q=80\");\n  const [top, setTop] = React.useState(\"Nothing like enjoying a wholesome time with the gang.\");\n  const [bottom, setBottom] = React.useState(\"At the golden hour.\");\n  const [textColor, setTextColor] = React.useState(\"white\");\n  const [textWeight, setTextWeight] = React.useState(\"bold\");\n  return (\n    <Grommet full theme={grommet}>\n      <Box pad=\"medium\" align=\"center\" justify=\"center\" >\n        <Heading>React Meme Generator</Heading>\n        <Text>Open Source Meme Generator feel free to create memes and screenshot them.</Text>\n        <br />\n        <Box pad=\"medium\" alignContent=\"center\" justify=\"between\" direction=\"column\" width=\"medium\" height=\"medium\" background={{ image: `url(${url})` }} >\n          <Text weight={textWeight} color={textColor} >{top}</Text>\n          <Text weight={textWeight} color={textColor} >{bottom}</Text>\n        </Box>\n      </Box>\n      <Box pad=\"medium\" wrap direction=\"row\" align=\"center\" justify=\"center\" >\n        <FormField label=\"Text Color\">\n          <Select\n            options={['white', 'black', 'pink', 'grey']}\n            value={textColor}\n            onChange={({ option }) => setTextColor(option)}\n          />\n        </FormField>\n        <FormField label=\"Image URL\">\n          <TextInput value={url} onChange={(e) => setUrl(e.target.value)} />\n        </FormField>\n        <FormField label=\"Top Text\" >\n          <TextInput value={top} onChange={(e) => setTop(e.target.value)} />\n        </FormField>\n        <FormField label=\"Top Text\" >\n          <TextInput value={bottom} onChange={(e) => setBottom(e.target.value)} />\n        </FormField>\n        <FormField label=\"Select Text Weight\" >\n          <Select options={['bold', 'normal']} value={textWeight}  onChange={({ option }) => setTextWeight(option)} />\n        </FormField>\n      </Box>\n    </Grommet>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}